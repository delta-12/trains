import { HorizontalBox, VerticalBox, TabWidget, Button, LineEdit} from "std-widgets.slint";

export component TrainControllerUi inherits Window {

    in-out property <string> operation-mode-status: "Automatic";
    in-out property <string> operation-status-message: "";
    in-out property <float> commanded_power: 0.0;
    in-out property <float> authority: 0.0;
    in-out property <float> current_speed: 0.0;
    in-out property <bool> emergency_brake: false;

    // false = operating
    // true  = failing
    in-out property <bool> engine_status: false;
    in-out property <bool> brake_status: false;
    in-out property <bool> signal_status: false;

    // false = off
    // true  = on
    in-out property<bool> int-lights: false;
    in-out property<bool> ext-lights: false;
    in-out property<bool> right-doors: false;
    in-out property<bool> left-doors: false;


    callback request_automatic_mode();
    callback request_manual_mode();
    callback request_engine_fail();
    callback request_brake_fail();
    callback request_signal_fail();


    preferred-height: 400px;
    min-height: 1000px;
    preferred-width: 300px;
    min-width: 1000px;

    TabWidget {
        Tab {
            title: "Train Controller Home";
            VerticalBox {
                HorizontalBox {
                    VerticalBox {
                        Text {
                            text: root.operation-status-message;
                            max-height: 10px;
                            font-size: 13px;
                            color: red;
                            horizontal-alignment: center;
                        }
                        Button {
                            text: "Automatic";
                            min-width: 10px;
                            min-height: 30px;
                            max-height: 30px;
                            clicked => {
                                root.request_automatic_mode();
                            }
                        }
                        Button {
                            text: "Manual";
                            min-width: 10px;
                            min-height: 30px;
                            max-height: 30px;
                            clicked => {
                                root.request_manual_mode();
                            }
                        }
                        Text {
                            horizontal-alignment: center;
                            text: "Current Operation Mode: \{root.operation-mode-status}";
                            max-height: 10px;
                            font-size: 13px;
                        }
                    }   
                }
                VerticalBox {
                    spacing: 10px; // Adjust spacing as needed
        
                    // Commanded Power
                    HorizontalBox {
                        Text {
                            text: "Commanded Power:";
                            vertical-alignment: center;
                        }
                        TextInput {
                            text: root.commanded_power;
                            /*on text-changed: {
                                root.commanded_power = self.text;
                            }*/
                            width: 100px;
                        }
                    }
        
                    // Authority
                    HorizontalBox {
                        Text {
                            text: "Authority:";
                            vertical-alignment: center;
                        }
                        TextInput {
                            text: root.authority;
                            /*on text-changed: {
                                root.authority = self.text;
                            }*/
                            width: 100px;
                        }
                    }
        
                    // Current Speed
                    HorizontalBox {
                        Text {
                            text: "Current Speed:";
                            vertical-alignment: center;
                        }
                        TextInput {
                            text: root.current_speed;
                            /*on text-changed: {
                                root.current_speed = self.text;
                            }*/
                            width: 100px;
                        }
                    }
        
                    // Emergency Brake
                    HorizontalBox {
                        Text {
                            text: "Emergency Brake:";
                            vertical-alignment: center;
                        }
                        Button {
                            text: root.emergency_brake ? "ON" : "OFF";
                            clicked => {
                                root.emergency_brake = !root.emergency_brake;
                            }
                            width: 60px;
                        }
                    }
                }

            // buttons for engine failure, brake failure, signal pickup failure
            HorizontalBox {
                VerticalBox {
                    spacing: 10px;
    
                    Button {
                        text: "Engine Failure";
                        clicked => {
                            root.request_engine_fail();
                        }
                        width: 150px;
                    }
                    Text {
                        horizontal-alignment: center;
                        text: root.engine_status ? "Engine Status: FAILING" : "Engine Status: OPERATIONAL";
                        max-height: 10px;
                    }
                }
                VerticalBox {
                    Button {
                        text: "Brake Failure";
                        clicked => {
                            root.request_brake_fail();
                        }
                        width: 150px;
                    }
                    Text {
                        horizontal-alignment: center;
                        text: root.brake_status ? "Brake Status: FAILING" : "Brake Status: OPERATIONAL";
                        max-height: 10px;
                    }
                }
                VerticalBox {
                    Button {
                        text: "Signal Pickup Failure";
                        clicked => {
                            root.request_signal_fail();
                        }
                        width: 150px;
                    }
                    Text {
                        horizontal-alignment: center;
                        text: root.signal_status ? "Signal Pickup Status: FAILING" : "Signal Pickup Status: OPERATIONAL";
                        max-height: 10px;
                    }
                }   
            }  

            // buttons for lights and doors
            VerticalBox {
                spacing: 10px;

                // Interior Lights
                Rectangle {
                    area1 := TouchArea {
                        width: parent.width;
                        height: parent.height;
                        clicked => {
                            root.int-lights = !root.int-lights;
                        }
                    }
                    Text {
                        text: root.int-lights ? "Turn Off Interior Lights" : "Turn On Interior Lights";
                    }
                    background: root.int-lights ? green : red;
                    preferred-height: 20px;
                    max-height: 50px;
                    preferred-width: 60px;
                }

                Rectangle {
                    area2 := TouchArea {
                        width: parent.width;
                        height: parent.height;
                        clicked => {
                            root.ext-lights = !root.ext-lights;
                        }
                    }
                    Text {
                        text: root.ext-lights ? "Turn Off Exterior Lights" : "Turn On Exterior Lights";                    
                    }
                    background: root.ext-lights ? green : red;
                    preferred-height: 20px;
                    max-height: 50px;
                    preferred-width: 60px;
                }

                Rectangle {
                    area3 := TouchArea {
                        width: parent.width;
                        height: parent.height;
                        clicked => {
                            root.right-doors = !root.right-doors;
                        }
                    }
                    Text {
                        text: root.right-doors ? "Close Right Doors" : "Open Right Doors";
                    }
                    background: root.right-doors ? green : red;
                    preferred-height: 20px;
                    max-height: 50px;
                    preferred-width: 60px;
                }

                Rectangle {
                    area4 := TouchArea {
                        width: parent.width;
                        height: parent.height;
                        clicked => {
                            root.left-doors = !root.left-doors;
                        }
                    }
                    Text {
                        text: root.left-doors ? "Close Left Doors" : "Open Left Doors";
                    }
                    background: root.left-doors ? green : red;
                    preferred-height: 20px;
                    max-height: 50px;
                    preferred-width: 60px;
                }
            }
        

                /*VerticalBox {
                    Text {
                        //text: "Vital Train Parameters";
                        font-size: 30px;
                        color: white;
                        horizontal-alignment: center;
                        Rectangle {
                            border-color: blue;
                            border-radius: 20px;
                            border-width: 5px;
                            preferred-height: 300px;
                            width: parent.width / 2;
                            min-height: 150px;
                            max-height: 400px;
                            VerticalBox {
                                Text {
                                    text: "Commanded Power:";
                                    font-size: 20px;
                                    color: white;
                                    horizontal-alignment: left;
                                }
                                VerticalBox {
                                    LineEdit {
                                        input-type: text;

                                    }
                                }
                            }
                            HorizontalBox {
                                Text {
                                    text: "Authority:";
                                    font-size: 20px;
                                    color: white;
                                    horizontal-alignment: left;
                                }
                                VerticalBox {
                                    LineEdit {
                                        input-type: text;
                                        max-height: 40px;
                                    }
                                }
                            }
                        }
                    } 
                }*/
            }
        }
        Tab {
            title: "TestBench";
        }
    }
}
