import { HorizontalBox, Button, GroupBox, Switch, TabWidget, StandardTableView, LineEdit, VerticalBox, StandardListView, ScrollView, ComboBox } from "std-widgets.slint";

component TransitSystem inherits Rectangle {
    background: #252525;
    border-radius: 10px;
    preferred-height: 180px;
    in-out property <[[StandardListViewItem]]> row_data;
    in-out property <string> section;
    in-out property <string> block;
    in-out property <bool> mode: true;
    in-out property <bool> occupancy: false;
    VerticalLayout {
        padding-top: 10px;
        HorizontalLayout {
            padding-top: 7px;
            padding-left: 15px;
            spacing: 20px;
            Text { 
                text: "Train Schedule";
            }
            HorizontalLayout {
                Text {text: "Time: ";}
                Rectangle {
                    border-radius: 5px;
                    y: -4px;
                    width: 120px;
                    height: 25px;
                    border-width: 2px;
                    border-color: #4d4d4d;
                    Text {text: "hh:mm:ss";}
                }
            }
            HorizontalLayout {
                Text {text: "Throughput: ";}
                Rectangle {
                    border-radius: 5px;
                    y: -4px;
                    width: 120px;
                    height: 25px;
                    border-width: 2px;
                    border-color: #4d4d4d;
                    Text {text: "Train/hr/line";}
                }
            }
            HorizontalLayout {
                alignment: end;
                padding-right: 15px;
                ComboBox {
                    y: -7px;
                    model: [@tr("Simulation Speed"), @tr("x1"), @tr("x10"), @tr("x50")];
                }
            }
        }
        VerticalLayout {
            padding: 15px;
            StandardTableView {
                columns: [
                    { title: @tr("Section") },
                    { title: @tr("Block") },
                    { title: @tr("Mode") },
                    { title: @tr("Occupany") },
                    { title: @tr("Failure") },
                ];
                rows: [
                    [{text: "A"}, {text: "1"}, {text: mode ? "Open" : "Maintenance"}, {text: occupancy ? "Occupied" : ""}, {text: ""},],
                    [{text: "n/a"}, {text: "n/a"}, {text: "n/a"}, {text: "n/a"}, {text: ""},],
                    [{text: "n/a"}, {text: "n/a"}, {text: "n/a"}, {text: "n/a"}, {text: ""},],
                    [{text: "n/a"}, {text: "n/a"}, {text: "n/a"}, {text: "n/a"}, {text: ""},],
                    [{text: "n/a"}, {text: "n/a"}, {text: "n/a"}, {text: "n/a"}, {text: ""},],
                    [{text: "n/a"}, {text: "n/a"}, {text: "n/a"}, {text: "n/a"}, {text: ""},],
                ];
            }
        }
        ManageBlock := HorizontalLayout {
            alignment: start;
            padding: 15px;
            spacing: 10px;
            LineEdit {
                width: 120px;
                height: 30px;
                placeholder-text: @tr("Section");
                edited(input) => { section = input }
            }
            LineEdit {
                width: 120px;
                height: 30px;
                placeholder-text: @tr("Block");
                edited(input) => { block = input }
            }
            HorizontalLayout {
                Switch {
                    toggled => {mode = !mode}
                }
                Text {text:"  Maintenance Mode"; y: 7px;}
            }
            HorizontalLayout {
                Switch {}
                Text {text:" Switch"; y: 7px;}
            }
        }
    }
}

component TrainSchedule inherits Rectangle {
    background: #252525;
    border-radius: 10px;
    preferred-width: 150px;
    in-out property <string> train_name_1: "n/a";
    in-out property <string> train_name_2: "";
    in-out property <string> train_name_3: "";
    in-out property <string> train_name_4: "";
    in-out property <string> train_name_5: "";
    in-out property <string> train_name_6: "";
    in-out property <string> train_1_arrival_time: "n/a";
    in-out property <string> train_1_dst: "n/a";
    
    VerticalLayout {
        Rectangle {
            HorizontalLayout {
                padding-top: 7px;
                padding-left: 10px;
                Text { 
                    text: "Train Schedule";
                }
            }
        }
        VerticalLayout {
            padding: 10px;
            StandardTableView {
                columns: [
                    { title: @tr("Train") },
                    { title: @tr("ETA") },
                    { title: @tr("DST(s)") },
                ];
                rows: [
                    [ { text: train_name_1 }, { text: train_1_arrival_time }, { text: train_1_dst }, ],
                    [ { text: train_name_2 }, { text: "" }, { text: "" }, ],
                    [ { text: train_name_3 }, { text: "" }, { text: "" }, ],
                    [ { text: train_name_4 }, { text: "" }, { text: "" }, ],
                    [ { text: train_name_5 }, { text: "" }, { text: "" }, ],
                    [ { text: train_name_6 }, { text: "" }, { text: "" }, ],
                ];
            }
        }
    }
}

component ManualMode inherits Rectangle {
    in-out property <string> train_name;
    in-out property <string> destination;
    in-out property <string> arrival_time;
    callback manual-dispatch();
    VerticalLayout {
        padding: 10px;
        spacing: 5px;
        HorizontalLayout {
            alignment: start;
            Text { text: "Train Name: ";}
            Rectangle {width: 10px;}
            LineEdit {
                width: 120px;
                height: 30px;
                placeholder-text: @tr("Train 1");
                edited(input) => {train_name = input}
            } 
        }
        HorizontalLayout {
            alignment: start;
            Text { text: "Destination: ";}
            Rectangle {width: 10px;}
            LineEdit {
                width: 120px;
                height: 30px;
                placeholder-text: @tr("Downtown");
                edited(input) => {destination = input}
            } 
        }
        HorizontalLayout {
            alignment: start;
            Text { text: "Arrival Time:";}
            Rectangle {width: 10px;}
            LineEdit {
                width: 120px;
                height: 30px;
                placeholder-text: @tr("10:00:00");
                edited(input) => {arrival_time = input}
            } 
        }
        VerticalLayout {
            alignment: end; 
            Button { 
                max-height: 30px;
                preferred-width: 250px;
                text: "DISPATCH";
                clicked => {manual-dispatch()}
            } 
        }
    }
}

component AutomaticMode inherits Rectangle {
    in-out property<string> fileName: "";
    callback choose-file();
    callback parse-file();
    VerticalLayout {
        padding: 10px;
        spacing: 10px;
        HorizontalLayout {
            alignment: start;
            Text { text: "Choose File: ";}
            Rectangle {width: 10px;}
            Rectangle {
                border-radius: 5px;
                y: -3px;
                width: 150px;
                height: 25px;
                border-width: 2px;
                border-color: #4d4d4d;
                Text {text: fileName;}
            } 
        }
        HorizontalLayout {
            Button { 
                max-height: 30px;
                text: "Open File";
                clicked => {choose-file()}
            }
        }
        
        VerticalLayout {
            alignment: end; 
            Button { 
                max-height: 30px;
                preferred-width: 250px;
                text: "DISPATCH";
                clicked => {parse-file()}
            } 
        }       
    }
}

component Dispatch inherits Rectangle {
    property <bool> automatic_mode: true;
    in-out property<string> fileName: "";
    in-out property <string> train_name;
    in-out property <string> destination;
    in-out property <string> arrival_time;

    callback choose-file();
    callback parse-file();
    callback manual-dispatch();

    background: #252525;
    border-radius: 10px;
    preferred-height: 150px;
    VerticalLayout {
        padding: 10px;
        spacing: 10px;
        alignment: stretch;
        Rectangle {
            // background: red;
            height: 18px;
            HorizontalLayout {
                Text { 
                    text: "Dispatch";
                }
            }
        }
        Rectangle {
            height: 20px;
            // background: green;
            HorizontalLayout {
                spacing: 10px;
                Switch {
                    checked: automatic_mode;
                    toggled => {automatic_mode = !automatic_mode;}
                }
                Text {
                    y: 3px;
                    text: automatic_mode ? "Automatic Mode" : "Manual Mode";
                }
            }
        }

        if(automatic_mode == true) : AutomaticMode {
            choose-file => {root.choose-file()}
            parse-file => {root.parse-file()}
            fileName: fileName;
        }
        if(automatic_mode == false) : ManualMode {
            train_name <=> train_name;
            destination <=> destination;
            arrival_time <=> arrival_time;
            manual-dispatch => {manual-dispatch()}
        }    
    }
}

component TestBenchInputs {
    in-out property <string> block_occupancy;
    in-out property <string> section_occupancy;

    in-out property <string> confirm_occupancy_message;

    // Callbacks
    callback print_occupancy_message();
    VerticalLayout {
        alignment: start;
        padding: 10px;
        spacing: 10px;
        WaysideOccupancy := VerticalLayout {
            spacing: 10px;
            Text {text: "Wayside Occupancy Signal:";}
            LineEdit {
                height: 30px;
                placeholder-text: @tr("Section");
                edited(input) => {section_occupancy = input}
            }
            LineEdit {
                height: 30px;
                placeholder-text: @tr("Block Number");
                edited(input) => {block_occupancy = input}
            }
            Button {
                text: "Send Occupancy Signal";
                clicked => {print_occupancy_message()}
            }
            Text {
                text: confirm_occupancy_message;
            }
        }
        // WaysideFailure := VerticalLayout {
        //     Text {text: "Wayside Failure Signal:";}
        //     Button {
        //         text: "Send Occupancy Signal";
                
        //     }
        //     Text {
        //         text: "Failure Signal Here";
        //     }
        // }
    }
}

export component CtcUi inherits Window {
    in-out property <string> selected_fileName;
    in-out property <string> train_1: " ";
    in-out property <string> train_1_at: " ";
    in-out property <string> train_1_dst;
    in-out property <[[StandardListViewItem]]> row_data;
    in-out property <string> train_name;
    in-out property <string> destination;
    in-out property <string> arrival_time;
    in-out property <string> maintenance_block;
    in-out property <string> maintenance_section;

    //TestBench
    in-out property <string> section_occupancy;
    in-out property <string> block_occupancy;
    in-out property <bool> occupancy;

    in-out property <string> authority;
    in-out property <string> dwell_time;
    in-out property <string> confirm_occupancy_message;
    in-out property <string> confirm_output_message;
    in-out property <string> confirm_maintenance_message;
    in-out property <string> confirm_switch_message;
    in-out property <string> confirm_automatic_dispatch;
    callback print_occupancy_message();
    callback print_output_to_wayside();
    callback print_maintenance_message();
    callback print_switch_message();
    callback print_automatic_dispatch();

    callback choose-file();
    callback parse-file();
    callback on_test_clicked();
    callback manual-dispatch();

    title: "CTC Office";
    preferred-width: 600px;
    preferred-height: 500px;
    TabWidget {
        Tab {
            title: @tr("CTC Home");
            
            VerticalLayout {
                padding: 15px;
                spacing: 15px;
                alignment: stretch;
                TransitSystem {
                    row_data: row_data;
                    occupancy: occupancy;
                } // Transit System Top Widget
                HorizontalLayout { // Bottom Widget Containing Train Schedule and Dispatch
                    spacing: 15px;
                    alignment: stretch;
                    TrainSchedule {
                        train_name_1: train_1;
                        train_1_arrival_time: train_1_at;
                        train_1_dst: train_1_dst;
                    }
                    Dispatch { // Bottom Right Dispatch
                        fileName: selected_fileName;
                        choose-file => {root.choose-file();}
                        parse-file => {root.parse-file()}
                        train_name <=> train_name;
                        destination <=> destination;
                        arrival_time <=> arrival_time;
                        manual-dispatch => {root.manual-dispatch()}
                    }
                }   
            }
        }
        Tab {
            title: @tr("Test Bench");
            HorizontalLayout {
                padding: 15px;
                spacing: 20px;
                Rectangle {
                    background: #252525;
                    border-radius: 10px;
                    VerticalLayout {
                        alignment: start;
                        padding: 10px;
                        padding-left: 15px;
                        Text {text: "Inputs";}
                        Rectangle {}
                        TestBenchInputs {
                            block_occupancy <=> block_occupancy;
                            section_occupancy <=> section_occupancy;
                            confirm_occupancy_message: confirm_occupancy_message;
                            print_occupancy_message => {root.print_occupancy_message()}
                        }     
                    }
                } 
                Rectangle {
                    background: #252525;
                    border-radius: 10px;
                    VerticalLayout {
                        alignment: start;
                        padding: 10px;
                        padding-left: 15px;
                        Text {text: "Outputs";}
                        Rectangle {}
                    }
                }    
            }
        }
    }
}


