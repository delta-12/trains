on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: d3lta12/slint-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: Cache CMake files
        id: cache-cmake
        uses: actions/cache@v4
        env:
          cache-name: cache-cmake
        with:
          path: ./build
          key: ${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt', '**.cmake') }}
      - name: Generate CMake cache
        if: ${{ steps.cache-cmake.outputs.cache-hit != 'true' }}
        run: cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Debug
      - name: Build check
        run: cmake --build build --target trains -j$(nproc)
  cppcheck:
    runs-on: ubuntu-latest
    container:
      image: d3lta12/slint-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: Cache CMake files
        id: cache-cmake
        uses: actions/cache@v4
        env:
          cache-name: cache-cmake
        with:
          path: ./build
          key: ${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt', '**.cmake') }}
      - name: Generate CMake cache
        if: ${{ steps.cache-cmake.outputs.cache-hit != 'true' }}
        run: cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Debug
      - name: Cppcheck
        run: cmake --build build -j$(nproc) --target cppcheck
      - name: Upload Cppcheck Report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: cppcheck-report
          path: build/cppcheck_report.xml
  # unit-tests:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: d3lta12/slint-build
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: "recursive"
  #     - name: Cache CMake files
  #       id: cache-cmake
  #       uses: actions/cache@v4
  #       env:
  #         cache-name: cache-cmake
  #       with:
  #         path: ./build
  #         key: ${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt', '**.cmake') }}
  #     - name: Generate CMake cache
  #       if: ${{ steps.cache-cmake.outputs.cache-hit != 'true' }}
  #       run: cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Debug
  #     - name: Build tests
  #       run: cmake --build build -j$(nproc)
  #     - name: Execute tests
  #       run: ctest --test-dir build --verbose
  #     - name: Upload unit tests log
  #       if: ${{ failure() }}
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: unit-tests-log
  #         path: build/Testing/Temporary/LastTest.log
  #     - name: Upload Valgrind reports
  #       if: ${{ failure() }}
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: valgrind-reports
  #         path: build/Testing/Temporary/test_*-valgrind-report.xml
  uncrustify:
    runs-on: ubuntu-latest
    container:
      image: d3lta12/slint-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: Cache CMake files
        id: cache-cmake
        uses: actions/cache@v4
        env:
          cache-name: cache-cmake
        with:
          path: ./build
          key: ${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt', '**.cmake') }}
      - name: Generate CMake cache
        if: ${{ steps.cache-cmake.outputs.cache-hit != 'true' }}
        run: cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Debug
      - name: Crust check
        run: cmake --build build -j$(nproc) --target uncrustify-check
      - name: Upload Uncrustify Report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: uncrustify-report
          path: build/uncrustify-report.txt